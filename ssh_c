#include <libssh/libssh.h>
#include <iostream>
#include <fstream>
#include <string>

int main()
{
    // open the text file containing the credentials
    std::ifstream credentials_file("credentials.txt");
    if (!credentials_file.is_open()) {
        std::cerr << "Error opening credentials file" << std::endl;
        return 1;
    }

    // read the IP address, username, and password from the file
    std::string ip_address, username, password;
    credentials_file >> ip_address >> username >> password;

    // create a new SSH session
    ssh_session my_ssh_session;
    int rc;
    my_ssh_session = ssh_new();
    if (my_ssh_session == NULL) {
        std::cerr << "Error creating SSH session" << std::endl;
        return 1;
    }

    // set the options for the SSH session
    ssh_options_set(my_ssh_session, SSH_OPTIONS_HOST, ip_address.c_str());
    ssh_options_set(my_ssh_session, SSH_OPTIONS_USER, username.c_str());
    ssh_options_set(my_ssh_session, SSH_OPTIONS_PASSWORD, password.c_str());

    // connect to the SSH server
    rc = ssh_connect(my_ssh_session);
    if (rc != SSH_OK) {
        std::cerr << "Error connecting to SSH server: " << ssh_get_error(my_ssh_session) << std::endl;
        ssh_free(my_ssh_session);
        return 1;
    }

    // authenticate with the SSH server
    rc = ssh_userauth_password(my_ssh_session, NULL, password.c_str());
    if (rc != SSH_AUTH_SUCCESS) {
        std::cerr << "Error authenticating with SSH server: " << ssh_get_error(my_ssh_session) << std::endl;
        ssh_disconnect(my_ssh_session);
        ssh_free(my_ssh_session);
        return 1;
    }

    // run the command "show"
    ssh_channel channel = ssh_channel_new(my_ssh_session);
    if (channel == NULL) {
        std::cerr << "Error creating SSH channel" << std::endl;
        ssh_disconnect(my_ssh_session);
        ssh_free(my_ssh_session);
        return 1;
    }

    rc = ssh_channel_open_session(channel);
    if (rc != SSH_OK) {
        std::cerr << "Error opening SSH channel: " << ssh_get_error(my_ssh_session) << std::endl;
        ssh_channel_free(channel);
        ssh_disconnect(my_ssh_session);
        ssh_free(my_ssh_session);
        return 1;
    }

    rc = ssh_channel_request_exec(channel, "show");
    if (rc != SSH_OK) {
        std::cerr << "Error running command: " << ssh_get_error(my_ssh_session) << std::endl;
        ssh_channel_close(channel);
        ssh_channel_free(channel);
        ssh_disconnect(my_ssh_session);
        ssh_free(my_ssh_session);
        return 1;
    }

    // read the output of the command
    char buffer[256];
    int nbytes;
    while ((nbytes = ssh_channel_read(channel, buffer, sizeof(buffer), 0)) > 0) {
        std::cout << std::string(buffer, nbytes);
    }

    ssh_channel_close(channel);
    ssh_channel_free(channel);
    ssh_disconnect(my_ssh_session);
    ssh_free(my_ssh_session);

    return 0;
}
